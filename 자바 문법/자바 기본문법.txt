${string_prompt} 


클래스 객체

클래스는 객체를 만들기위한 틀을 만든 것으로 변수와 메서드로 기능을 정의해놓은 곳이다.

객체는 클래스가 인스턴스화한 것으로 클래스안에 정의된 메서드와 변수같은 속성이 실제로 사용가능하도록 만드는 것이다.

생성자
클래스안에 멤버변수를 초기화 하기위한 것으로 클래스의 이름과 대소문자 모두 같다.
매개변수를 받아주는 것으로 여러개를 만들수 있다.

참조타입 기본타입

참조타입 - 배열이나 클래스와 같이 new를 통해 만들어지며 주소값을 가지고 힙영역에 저장되는 타입
기본타입 - char, int, double 등으로 기본적으로 값을가지고 스택영역에 저장되는 타입

상속
부모의 클래스를 자식의 클래스가 상속받아서 부모의 클래스에 있는 변수나 메서드를 그대로받아 사용하는 것으로
상속을 받을 경우 부모의 기본생성자가 있어야 연결된다. 기본생성자가 없는 경우 부모의 생성자를 보고 맞춰 연결해준다.

오버라이딩 
부모의 클래스에 정의 된 메서드를 자식 클래스에서 같은 이름으로 내용을 재정의하여 사용하는 것

오버로딩
같은 이름의 메서드를 매개변수의 순서와 종류를 바꿔서 중복해서 사용하는 것

this, super

this - 내안의 클래스를 지칭하며 this.은 내안의 멤버변수 혹은 메서드를 사용하고 this()는 내안의 생성자를 호출한다.

super - 부모의 클래스를 지칭하며 super.은 부모의 멤버변수 혹은 메서드를 사용하고 super()는 부모안의 생성자를 호출한다.

접근제한자
   public-사용할수있는 범위가 모든 패키지에서 사용가능하다.
   protected-같은 패키지안에서만 사용가능하지만 상속을 허용한다.
   default-같은패키지안에서만 사용이 가능하다.
   private-같은 클래스 안에서만 사용이 가능하다.

은닉(getter,setter)
private으로 선언된 멤버변수를 클래스 밖에서 사용할수 없으므로, 
getter메서드와 setter메서드를 사용해서 변수의 값을 저장하고 반환할수 있다.

다형성
객체가 여러가지의 타입이 될수 있다는 의미로 상속받은 자식의 메서드는 부모의 클래스로 저장될 수 있다.
부모의 타입으로 바뀐 자식 타입은 부모의 기능만을 쓸수 있는 상태이므로,
캐스팅을 통해서 원래의 타입으로 되돌려서 자식 고유의 기능을 사용할 수 있다.
instanceof 키워드로 그전의 타입이 어떤 타입이었는지 확인할 수 있다.


static
사용제한자로 사용은 클래스명.이름으로 사용하며, 변수앞에 붙을 경우 변수의 값이 만들어지는 객체마다 공유된다.
메서드에 붙을 경우 static 변수 사용만을 허용하는데 static이 아닌 변수를 사용하고자한다면 메서드안에
객체 생성을 하여 값을 변경할 수 있다.

객체생성을 하나로 제한하는 것으로 싱글톤패턴이라는 방식이 있다. private으로 생성자를 생성하면 외부에서 객체를 만들수 없다.
private static으로 클래스안에서 객체를 생성하고 public static getter메서드를 통해 객체를 생성했던 객체를 돌려준다.


final
금지하는 의미로 크게 오버라이딩 금지와 상속금지가 있다
클래스에 붙으면 상속금지이고 메서드에 붙으면 오버라이딩 금지이다.
final이 붙은 변수는 초기화를 해줘야하는데 한번 값이 들어가면 변경이 안된다.

static과 final이 동시에 붙으면 상수를 의미하게 된다. 상수는 대문자를 사용한다.

abstract
추상 클래스 - 부모클래스를 객체로 생성하지 않고 자식클래스를 객체로 생성하는 경우, 부모의 클래스를 추상클래스로 선언할수 있다.
	    추상클래스로 선언하여야만 추상메서드를 사용할수있다. 일반변수, 일반 메서드도 사용가능

추상 메서드 - 공통적으로 사용할 메서드를 추상화하여 선언해놓으면 자식에서 강제로 오버라이딩해서 사용해야한다.

